{"version":3,"sources":["img/svg/logo.png","img/svg/add.svg","Components/Nav.js","Components/Article.js","Components/FeedNav.js","Components/Loading.js","Container/Home.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","src","logo","alt","plus","Component","Article","pic","this","props","name","title","text","AuthorCard","id","FeedNav","Loading","Home","state","isloading","articles","getarticle","fetch","then","res","json","parJson","setState","map","arr","body","picUrl","author","username","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,iC,0MC4C5BC,E,iLAhCP,OACI,6BACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,QAEX,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,0CAGJ,yBAAKH,UAAU,SAEX,yBAAKC,IAAKG,IAAMD,IAAI,MAEpB,oCAGA,8C,GArBNE,aCAZC,E,iLAWE,OACI,yBAAKN,UAAU,WACX,kBAAC,EAAD,CACIO,IAAKC,KAAKC,MAAMF,IAChBG,KAAMF,KAAKC,MAAMC,OAGrB,6BACA,yBAAKV,UAAU,QACX,4BAAKQ,KAAKC,MAAME,OAChB,2BAAIH,KAAKC,MAAMG,Y,GArBbP,aAoChBQ,E,iLAOE,OAAQ,yBAAKb,UAAU,cAInB,yBAAKc,GAAG,SAASb,IAAKO,KAAKC,MAAMF,IAAKJ,IAAI,aAC1C,0BAAMH,UAAU,YAAYQ,KAAKC,MAAMC,KAAvC,U,GAZaL,aA+CVC,GAvBOD,YAuBPC,GC3DAS,E,iLAvBP,OAEI,yBAAKf,UAAU,OAEX,0BAAMc,GAAG,SAAT,QACA,wCACA,uCACA,0BAAMA,GAAG,cAAT,a,GAXMT,aCUPW,MAVf,WACI,OAAO,6BAEH,yBAAKhB,UAAU,SAASC,IAAKC,IAAMC,IAAI,OC2FhCc,E,YAxEb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAEDS,MAAQ,CACXC,WAAW,EACXC,SAAU,IALK,E,iFAgBjBZ,KAAKa,e,mCAKO,IAAD,OAEXC,MAAM,iBACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZP,SAAUM,EAAQN,SAClBD,WAAW,S,+BAUjB,OACE,yBAAKnB,UAAU,QAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,MAMCQ,KAAKU,MAAMC,UAAY,kBAAC,EAAD,MAAcX,KAAKU,MAAME,SAASQ,KAAI,SAACC,GAC7D,OAAO,kBAAC,EAAD,CACLlB,MAAOkB,EAAIlB,MACXC,KAAMiB,EAAIC,KACVvB,IAAKsB,EAAIE,OACTrB,KAAMmB,EAAIG,OAAOC,mB,GA3DVC,IAAM7B,WCRL8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39cd3ec0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2810b0e6.png\";","module.exports = __webpack_public_path__ + \"static/media/add.303fe227.svg\";","import React, { Component } from 'react';\nimport logo from '../img/svg/logo.png';\nimport plus from '../img/svg/add.svg';\n\n\n\n\nclass Nav extends Component {\n\n\n    render() {\n\n        return (\n            <nav>\n                <div className=\"nav-con\">\n                    <div className=\"logo\">\n\n                        <img src={logo} alt=\"logo\" ></img>\n                        <span>SPUTNIK</span>\n                    </div>\n\n                    <div className=\"links\">\n\n                        <img src={plus} alt=\"+\"></img>\n\n                        <li>\n                            Home\n                        </li>\n                        <li>\n                            Profile\n                        </li>\n\n\n                    </div>\n                </div>\n\n\n            </nav >\n        )\n    }\n}\n\n\n\nexport default Nav;","import React, { Component } from 'react';\n\n\n\n\n\n\nclass Article extends Component {\n\n\n\n\n\n\n\n\n    render() {\n\n        return (\n            <div className=\"article\">\n                <AuthorCard\n                    pic={this.props.pic}\n                    name={this.props.name}\n                />\n\n                <br></br>\n                <div className=\"body\">\n                    <h1>{this.props.title}</h1>\n                    <p>{this.props.text}</p>\n                </div>\n\n\n\n\n\n            </div>\n        )\n    }\n}\n\n\n\n\nclass AuthorCard extends Component {\n\n\n\n    render() {\n\n\n        return (<div className=\"authorCard\">\n\n\n\n            <img id=\"proPic\" src={this.props.pic} alt=\"Profile \" />\n            <span className=\"authName\">{this.props.name} </span>\n\n\n\n\n        </div >)\n    }\n\n\n\n}\n\nclass Comment extends Component {\n    render() {\n        return (\n            <div className=\"comment\">\n                <AuthorCard />\n                <div className=\"cmnt-body\">\n                    <p>This is a very bad idea</p>\n                </div>\n\n\n\n            </div>\n\n\n\n\n\n        )\n    }\n}\n\n\n\nexport default Article;","import React, { Component } from 'react'\n\n\n\nclass FeedNav extends Component {\n\n    render() {\n\n        return (\n\n            <div className=\"bar\">\n\n                <span id=\"first\">Feed</span>\n                <span>Global</span>\n                <span>Trend</span>\n                <span id=\"noneBorder\">Tags</span>\n\n\n\n            </div>\n\n        )\n\n\n    }\n\n\n\n}\n\n\nexport default FeedNav","import React from 'react'\nimport logo from '../img/svg/logo.png'\n\n\nfunction Loading() {\n    return <div>\n\n        <img className=\"loader\" src={logo} alt=\"\" />\n\n    </div>\n\n\n}\n\nexport default Loading;","import React from 'react';\nimport Nav from '../Components/Nav';\nimport Article from '../Components/Article'\nimport FeedNav from '../Components/FeedNav'\nimport { useState } from 'react';\nimport Loading from '../Components/Loading'\n\n\n\n\n\n\n\nlet title = \"test title\";\nlet picUrl = \"https://i.picsum.photos/id/257/200/200.jpg\";\nlet text = \"lorem fkljsdfu iaewhcna if iansdcjaweio fiaefhi ewnciewj neicew8 jnckc sjs kfjsdkf asdoifj w3ifncoew jkdsfjdsfjkasdfjalsdjfiawjae fndk aisdf udskfjf sdfuijedaisldfdkjfkjdsfkdsfjiwefjoi nccneifjkdsjfk jdks fjiasfiaejwnoa;nadfisidfhjbcajdsh fdh dfsj dhfaehfuaekbsfuaewbfsj d fjdfhauefincaheuhcjadn df sfdeuwf \"\n\nlet name = \"Tushar Bhardwaj\"\n\n\nclass Home extends React.Component {\n\n\n\n\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isloading: true,\n      articles: []\n    }\n\n\n\n\n\n\n  }\n\n  componentDidMount() {\n    this.getarticle()\n\n\n  }\n\n  getarticle() {\n\n    fetch('/api/articles')\n      .then(res => res.json())\n      .then(parJson => {\n        this.setState({\n          articles: parJson.articles,\n          isloading: false\n        })\n      })\n\n\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"Home\">\n\n        <Nav />\n        <FeedNav />\n\n\n\n\n\n        {this.state.isloading ? <Loading /> : this.state.articles.map((arr) => {\n          return <Article\n            title={arr.title}\n            text={arr.body}\n            pic={arr.picUrl}\n            name={arr.author.username}\n\n\n          />\n        })\n        }\n\n\n\n\n\n\n\n\n      </div>\n    )\n  }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/styles.scss';\nimport Home from './Container/Home'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}